(library (editor)
  (export
    event-loop)
  (import
    (rnrs records syntactic (6))
    (rnrs base (6))
    (rnrs io simple (6))
    (rnrs io ports (6))
    (rnrs control (6))
    (rnrs eval (6))
    (rnrs conditions (6))
    (rnrs exceptions (6))
    (ciska-commands))

  (define (event-loop state)
    (guard (condition
            ((lexical-violation? condition)
             (display "Error: Invalid input syntax\n")
             (event-loop state))
            ((i/o-error? condition)
             (display "Error: I/O error occurred\n")
             (event-loop state))
            ((violation? condition)
             (display "Error: Invalid command or syntax\n")
             (event-loop state))
            ((error? condition)
             (display "Error: ")
             (display (condition-message condition))
             (newline)
             (event-loop state))
            (else
             (display "An unexpected error occurred\n")
             (event-loop state)))
      (display ":")
      (flush-output-port (current-output-port))
      (let ((command (get-datum (current-input-port))))
        (if (eof-object? command)
            (begin
              (display "End of input. Exiting editor.\n")
              state)
            (let ((new-state ((eval command (environment '(rnrs) '(ciska-commands))) state)))
              (event-loop new-state)))))))
